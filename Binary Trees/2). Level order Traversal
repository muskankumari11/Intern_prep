#include <iostream>
#include <queue>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;
    node(int d) {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

node* buildTree() {
    int data;
    cout << "Enter data for node: ";
    cin >> data;
    if (data == -1) {
        return NULL;
    }
    node* root = new node(data);
    cout << "Enter data for inserting in left of " << data << ": ";
    root->left = buildTree();
    cout << "Enter data for inserting in right of " << data << ": ";
    root->right = buildTree();
    return root;
}

// Level order traversal
void levelOrderTraversal(node* root) {
    if (root == NULL)
        return;

    queue<node*> q;
    q.push(root);
    while (!q.empty()) {
        int levelSize = q.size(); // Number of nodes at current level
        
        for (int i = 0; i < levelSize; i++) {
            node* temp = q.front();
            q.pop();
            
            cout << temp->data << " ";

            if (temp->left) {
                q.push(temp->left);
            }
            if (temp->right) {
                q.push(temp->right);
            }
        }
        cout << endl; // Move to the next level
    }
}

int main() {
    node* root = NULL;
    // Creating a tree
    cout << "Enter the data for the tree nodes. Enter -1 to stop.\n";
    root = buildTree();
    
    // Level order
    //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
    cout << "Printing the level order traversal output:\n";
    levelOrderTraversal(root);
    return 0;
}
