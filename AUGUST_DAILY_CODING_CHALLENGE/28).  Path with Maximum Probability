class Solution {
public:
    typedef pair<double, int> P;

    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        // Adjacency list: node -> [(adjNode, probability)]
        unordered_map<int, vector<pair<int, double>>> adj;

        // Fill adjacency list
        for (int i = 0; i < edges.size(); i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            double prob = succProb[i];
            adj[u].emplace_back(v, prob);
            adj[v].emplace_back(u, prob);
        }

        // Max heap for Dijkstra's algorithm
        priority_queue<P> pq;
        vector<double> result(n, 0.0);

        // Initialize starting node
        result[start_node] = 1.0;
        pq.push({1.0, start_node});

        while (!pq.empty()) {
            int currNode = pq.top().second;
            double currProb = pq.top().first;
            pq.pop();

            // If we've reached the end node, return the probability
            if (currNode == end_node) {
                return currProb;
            }

            for (auto& temp : adj[currNode]) {
                int adjNode = temp.first;
                double adjProb = temp.second;

                // Update result if we found a better path
                if (result[adjNode] < currProb * adjProb) {
                    result[adjNode] = currProb * adjProb;
                    pq.push({result[adjNode], adjNode});
                }
            }
        }

        // If no path exists, return 0
        return 0.0;
    }
};
