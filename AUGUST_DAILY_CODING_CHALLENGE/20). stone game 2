class Solution {
public:
    int help(vector<int>& piles, int i, int M, vector<vector<int>>& dp) {
        if (i >= piles.size()) {
            return 0;
        }
        if (dp[i][M] != -1) {
            return dp[i][M];
        }
        int total = 0;
        int ans = INT_MIN;
        for (int j = 0; j < 2 * M && i + j < piles.size(); j++) {
            total += piles[i + j];
            ans = max(ans, total - help(piles, i + j + 1, max(M, j + 1), dp));
        }
        dp[i][M] = ans;
        return dp[i][M];
    }

    int stoneGameII(vector<int>& piles) {
        int sum = accumulate(piles.begin(), piles.end(), 0);
        int n = piles.size();

        vector<vector<int>> dp(n, vector<int>(2 * n, -1));
        int diff = help(piles, 0, 1, dp);
        return (sum + diff) / 2;
    }
};
