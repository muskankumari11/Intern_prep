/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneUtil(Node* node, unordered_map<Node*, Node*>& mp) {
        if (!node)
        return NULL;
        if (mp.find(node) != mp.end()) {
            return mp[node];
        }
        
        // Create a new node and add it to the hashmap
        Node* newNode = new Node(node->val);
        mp[node] = newNode;
        
        // Iterate over all neighbors and clone them recursively
        for (auto neighbor : node->neighbors) {
            newNode->neighbors.push_back(cloneUtil(neighbor, mp));
        }
        
        return newNode;
    }

    Node* cloneGraph(Node* node) {
        unordered_map<Node*, Node*> mp;
        return cloneUtil(node, mp);
    }
};
