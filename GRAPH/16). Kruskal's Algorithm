#include <algorithm>

// Comparator function for sorting the edges based on weight
bool cmp(vector<int>& a, vector<int>& b) {
    return a[2] < b[2];
}

// Function to initialize the parent and rank arrays
void makeSet(vector<int>& parent, vector<int>& rank, int n) {
    for(int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

// Function to find the parent of a node with path compression
int findParent(vector<int>& parent, int node) {
    if(parent[node] == node) {
        return node;
    }
    // Path compression optimization
    return parent[node] = findParent(parent, parent[node]);
}

// Function to union two sets by rank
void unionSet(int u, int v, vector<int>& parent, vector<int>& rank) {
    u = findParent(parent, u);
    v = findParent(parent, v);

    if(rank[u] < rank[v]) {
        parent[u] = v;
    } else if(rank[v] < rank[u]) {
        parent[v] = u;
    } else {
        parent[v] = u;
        rank[u]++;
    }
}

// Function to calculate the Minimum Spanning Tree (MST) weight using Kruskal's Algorithm
int minimumSpanningTree(vector<vector<int>>& edges, int n) {
    // Sort edges based on weight
    sort(edges.begin(), edges.end(), cmp);

    // Initialize parent and rank vectors
    vector<int> parent(n);
    vector<int> rank(n);
    makeSet(parent, rank, n);

    int minWeight = 0;
    for(int i = 0; i < edges.size(); i++) {
        int u = findParent(parent, edges[i][0]);
        int v = findParent(parent, edges[i][1]);
        int wt = edges[i][2];

        // If u and v have different parents, include this edge in the MST
        if(u != v) {
            minWeight += wt;
            unionSet(u, v, parent, rank);
        }
    }
    return minWeight;
}
