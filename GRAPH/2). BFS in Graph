#include <queue>
#include <list>
#include <unordered_map>
#include <vector>

void prepareAdjList(unordered_map<int, list<int>>& adjList, const vector<pair<int, int>>& edges) {
    for (const auto& edge : edges) {
        int u = edge.first;
        int v = edge.second;
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
}

void printAdj(const unordered_map<int, list<int>>& adjList) {
    for (const auto& pair : adjList) {
        cout << pair.first << " -> ";
        for (const auto& neighbor : pair.second) {
            cout << neighbor << " ";
        }
        cout << endl;
    }
}

void bfs(const unordered_map<int, list<int>>& adjList, unordered_map<int, bool>& visited, vector<int>& ans, int node) {
    queue<int> q;
    q.push(node);
    visited[node] = true;
    
    while (!q.empty()) {
        int frontNode = q.front();
        q.pop();
        
        // Store frontNode in ans
        ans.push_back(frontNode);
        
        // Traverse all neighbors of frontNode
        for (const auto& neighbor : adjList.at(frontNode)) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }
}

vector<int> BFS(int vertex, const vector<pair<int, int>>& edges) {
    unordered_map<int, list<int>> adjList;
    vector<int> ans;
    unordered_map<int, bool> visited;
    
    prepareAdjList(adjList, edges);
    
    printAdj(adjList);
    
    // Traverse all components of the graph
    for (int i = 0; i < vertex; i++) {
        if (!visited[i]) {
            bfs(adjList, visited, ans, i);
        }
    }
    
    return ans;
}

